From dc3e91182e3f0201abdce6158aa5b52e856731b7 Mon Sep 17 00:00:00 2001
From: Alex Manoel Ferreira Silva <windolboy@yahoo.com.br>
Date: Fri, 26 Jun 2020 12:32:32 -0300
Subject: [PATCH] fix(schemaProxy): performance improvement

* Removal of recursion from $ref resolution using a local cache;
* Inclusion of cache of proxies created previously and that does not have $id;

fixes #234
---
 lib/schemaProxy.js | 22 +++++++++++++++++++---
 1 file changed, 19 insertions(+), 3 deletions(-)

diff --git a/lib/schemaProxy.js b/lib/schemaProxy.js
index c9d6498..a928473 100644
--- a/lib/schemaProxy.js
+++ b/lib/schemaProxy.js
@@ -96,6 +96,8 @@ const handler = ({
 
   meta[symbols.meta] = (target, prop, receiver) => formatmeta(receiver);
 
+  const loadedSubschema = {};
+
   return {
     ownKeys: target => Reflect.ownKeys(target),
 
@@ -105,14 +107,26 @@ const handler = ({
       }
 
       const retval = Reflect.get(target, prop, receiver);
+
       if (retval === undefined && prop === keyword`examples` && !receiver[symbols.parent]) {
         return loadExamples(receiver[symbols.filename], 1);
       }
+
       if (typeof retval === 'object' && retval !== null) {
+        if (retval[symbols.filename]) {
+          // console.log('I am in a loop!');
+          return retval;
+        }
+
         if (retval[keyword`$ref`]) {
+          if (loadedSubschema[`${root}/${prop}`]) {
+            return loadedSubschema[`${root}/${prop}`];
+          }
+
           const [uri, pointer] = retval.$ref.split('#');
           // console.log('resolving ref', uri, pointer, 'from', receiver[symbols.filename]);
           const basedoc = uri || receiver[symbols.id];
+
           if (schemas.known[basedoc]) {
             const referenced = schemas.known[basedoc][symbols.resolve](pointer);
             // inject the referenced schema into the current schema
@@ -120,9 +134,6 @@ const handler = ({
           } else {
             console.error('cannot resolve', basedoc);
           }
-        } else if (retval[symbols.filename]) {
-          // console.log('I am in a loop!');
-          return retval;
         }
 
         // console.log('making new proxy from', target, prop, 'receiver', receiver[symbols.id]);
@@ -139,6 +150,11 @@ const handler = ({
           // eslint-disable-next-line no-param-reassign
           schemas.known[subschema[keyword`$id`]] = subschema;
         }
+
+        if (!loadedSubschema[`${root}/${prop}`]) {
+          loadedSubschema[`${root}/${prop}`] = subschema;
+        }
+
         return subschema;
       }
       return retval;
